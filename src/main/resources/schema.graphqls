schema {
  query: QueryType
  mutation: MutationType
}

type QueryType {
  monthlyPayments(month: YearMonth!): [MonthlySubscription]
  member(id: ID!): Member
  claim(id: ID!): Claim
  paymentSchedule(status: ChargeStatus!): [SchedulerState]
  categories: [Category!]
  items(payload: Payload!): ItemSearch!
  prices(date: String!, ids: [String!]!): [PricePoint!]!
  ticket(id: ID!): Ticket
  getFullTicketHistory(id: ID!): TicketHistory
  tickets(resolved: Boolean): [Ticket!]!
  getAnswerSuggestion(question: String): [Suggestion!]!
  me: String
  inventory(claimId: ID!): [InventoryItem]!
  filters(categoryId: String!): [FilterSuggestion!]!
  inventoryItemFilters(inventoryItemId: String!): [FilterOutput]
  switchableSwitcherEmails: [SwitchableSwitcherEmail!]!
}

type MutationType {
  chargeMember(id: ID!, amount: MonetaryAmount!): Member
  addAccountEntryToMember(
    memberId: ID!
    accountEntry: AccountEntryInput!
  ): Member!
  approveMemberCharge(approvals: [MemberChargeApproval!]!): Boolean
  updateClaimState(id: ID!, state: ClaimState!): Claim
  createClaim(memberId: ID!, date: LocalDateTime!, source: ClaimSource!): ID
  addClaimNote(id: ID!, note: ClaimNoteInput!): Claim
  createClaimPayment(id: ID!, payment: ClaimPaymentInput!): Claim
  setClaimType(id: ID!, type: ClaimTypes!): Claim
  setClaimInformation(id: ID!, information: ClaimInformationInput!): Claim
  updateReserve(id: ID!, amount: MonetaryAmount!): Claim
  setCoveringEmployee(id: ID!, coveringEmployee: Boolean!): Claim
  createTicket(ticket: TicketInput): ID
  changeTicketDescription(ticketId: ID!, newDescription: String): ID
  assignTicketToTeamMember(ticketId: ID!, teamMemberId: ID!): ID
  changeTicketStatus(ticketId: ID!, newStatus: TicketStatus): ID
  changeTicketReminder(ticketId: ID!, newReminder: RemindNotification): ID
  changeTicketPriority(ticketId: ID!, newPriority: Float): ID
  autoLabelQuestion(
    question: String!
    label: String!
    memberId: String
    messageIds: [String!]
  ): AutoLabel
  questionIsDone(memberId: ID!): Boolean
  whitelistMember(memberId: ID!): Boolean
  markClaimFileAsDeleted(claimId: ID!, claimFileId: ID!): Boolean
  backfillSubscriptions(memberId: ID!): Member!
  setClaimFileCategory(claimId: ID!, claimFileId: ID!, category: String): String
  addInventoryItem(item: InventoryItemInput!): Boolean
  removeInventoryItem(inventoryItemId: ID!): Boolean
  activateQuote(
    id: ID!
    activationDate: LocalDate!
    terminationDate: LocalDate
  ): Quote!
  # Creates a quote from a product and returns the quote id
  createQuoteFromProduct(
    memberId: ID!
    quoteData: QuoteFromProductInput!
  ): Quote!
  updateQuote(
    quoteId: ID!
    quoteData: QuoteInput!
    bypassUnderwritingGuidelines: Boolean
  ): Quote!
  markSwitchableSwitcherEmailAsReminded(id: ID!): Boolean!
  terminateContract(contractId: ID!, request: TerminateContractInput): Contract!
  activatePendingAgreement(contractId: ID!, request: ActivatePendingAgreementInput): Contract!
  changeTerminationDate(contractId: ID!, request: ChangeTerminationDateInput): Contract!
  revertTermination(contractId: ID!): Contract!
  createNorwegianGripenPriceEngine(request: CreateNorwegianGripenInput): Boolean!
  addNorwegianPostalCodes(postalCodesString: String): Boolean!
}

input CreateNorwegianGripenInput {
  baseFactorString: String
  factors: [NorwegianGripenFactorInput!]!
}

input NorwegianGripenFactorInput {
  factorType: NorwegianGripenFactorType!
  factorString: String!
}

enum NorwegianGripenFactorType {
  AGE
  CENTRALITY_GROUP
  ECONOMY_OF_MUNICIPALITY
  NUMBER_OF_PEOPLE
  APARTMENT_SIZE
  RENTED_OR_OWNED
}

type Contract {
  id: ID!
  holderMemberId: ID!
  switchedFrom: String
  masterInception: LocalDate
  status: ContractStatus!
  isTerminated: Boolean!
  terminationDate: LocalDate
  currentAgreementId: ID!
  hasPendingAgreement: Boolean!
  agreements: [Agreement!]!
  hasQueuedRenewal: Boolean!
  renewal: Renewal
  preferredCurrency: String!
  signSource: SignSource
  contractTypeName: String!
  createdAt: Instant!
}

enum ContractStatus {
  PENDING
  ACTIVE
  TERMINATED
}

union Agreement =
  SwedishApartment
  | SwedishHouse
  | NorwegianHomeContent
  | NorwegianTravel

interface AgreementCore {
  id: ID!
  fromDate: LocalDate
  toDate: LocalDate
  basePremium: MonetaryAmount!
  certificateUrl: String
  status: AgreementStatus!
}

type SwedishApartment implements AgreementCore {
  id: ID!
  fromDate: LocalDate
  toDate: LocalDate
  basePremium: MonetaryAmount!
  certificateUrl: String
  status: AgreementStatus!
  address: Address!
  numberCoInsured: Int!
  squareMeters: Int!
}

type SwedishHouse implements AgreementCore {
  id: ID!
  fromDate: LocalDate
  toDate: LocalDate
  basePremium: MonetaryAmount!
  certificateUrl: String
  status: AgreementStatus!
  address: Address!
  numberCoInsured: Int!
  squareMeters: Int!
  ancillaryArea: Int!
  yearOfConstruction: Int!
  numberOfBathrooms: Int!
  extraBuildings: [ExtraBuilding!]!
  isSubleted: Boolean!
}

type NorwegianHomeContent implements AgreementCore {
  id: ID!
  fromDate: LocalDate
  toDate: LocalDate
  basePremium: MonetaryAmount!
  certificateUrl: String
  status: AgreementStatus!
  address: Address!
  numberCoInsured: Int!
  squareMeters: Int!
}

type NorwegianTravel implements AgreementCore {
  id: ID!
  fromDate: LocalDate
  toDate: LocalDate
  basePremium: MonetaryAmount!
  certificateUrl: String
  status: AgreementStatus!
  numberCoInsured: Int!
}

enum AgreementStatus {
  PENDING
  ACTIVE_IN_FUTURE
  ACTIVE
  ACTIVE_IN_PAST
  TERMINATED
}

type Address {
  street: String!
  postalCode: String!
  city: String
}

enum SignSource {
  RAPIO
  WEBONBOARDING
  APP
  IOS
  ANDROID
  HOPE
}

type Renewal {
  renewalDate: LocalDate!
  draftCertificateUrl: String
  draftOfAgreementId: ID
}

input TerminateContractInput {
  terminationDate: LocalDate!
  terminationReason: TerminationReason!
  comment: String
}

input ChangeTerminationDateInput {
  newTerminationDate: LocalDate!
}

input ActivatePendingAgreementInput {
  pendingAgreementId: ID!
  fromDate: LocalDate!
}

enum TerminationReason {
  NO_FEEDBACK
  DISSATISFIED_WITH_SERVICE
  DISSATISFIED_WITH_APP
  DISSATISFIED_WITH_HEDVIG
  DISSATISFIED_WITH_OTHER
  ALREADY_HAVE_INSURANCE
  COVERED_BY_PARTNERS_INSURANCE
  PARTNER_ALREADY_HAS_HEDVIG_INSURANCE
  GOT_OFFER_FROM_JOB_OR_UNION_OR_SIMILAR
  WANT_TO_KEEP_OLD_INSURANCE
  STUCK_WITH_OLD_INSURANCE
  DONT_NEED_INSURANCE
  WANTED_OTHER_TYPE_OF_INSURANCE
  REGRET_BY_RIGHT_TO_WITHRAW
  MOVED
  MOVED_ABROAD
  MOVED_IN_WITH_PARENTS
  PRICE
  MISSED_PAYMENTS
  MISSED_PAYMENTS_BAD_RISK
  PAYMENT_ISSUES
  DISCOUNT_PERIOD_OVER
  CONFIRMED_FRAUD
  SUSPECTED_FRAUD
  OTHER
  UNKNOWN
}

type Suggestion {
  intent: String!
  reply: String!
  text: String!
  confidence: Float!
  allReplies: [AllRepliesEntry!]!
}
type AllRepliesEntry {
  intent: String!
  reply: String!
}

type AutoLabel {
  message: Boolean
}

input FilterPayload {
  filters: [Filter!]!
  inventoryItemId: ID!
}

input InventoryItemInput {
  inventoryItemId: String
  claimId: String!
  itemName: String!
  categoryName: String!
  categoryId: String!
  value: Float!
  source: String!
  upperRange: Float
  lowerRange: Float
  itemId: String
  filters: [Filter]
}

type InventoryItem {
  inventoryItemId: ID!
  claimId: String!
  itemName: String!
  categoryName: String!
  categoryId: String!
  value: Float!
  source: String!
  upperRange: Float
  lowerRange: Float
  itemId: String
  filters: [FilterOutput]
}

type PricePoint {
  id: String!
  itemId: String!
  date: String!
  lower: Float!
  mean: Float!
  upper: Float!
}

type Category {
  id: String!
  name: String!
}

input Payload {
  category: String!
  query: String!
  filters: [Filter!]!
}

input Filter {
  name: String!
  value: String!
}

type FilterOutput {
  name: String!
  value: String!
}

type ItemSearch {
  products: [Item!]!
  suggestions: [FilterSuggestion!]!
}

type FilterSuggestion {
  name: String!
  items: [String!]!
  others: [String!]!
}

type Item {
  category: String!
  id: String!
  name: String!
}

type FileUpload {
  fileUploadUrl: URL
  timestamp: Instant
  mimeType: String
  memberId: ID
}

type ClaimFileUpload {
  claimFileId: ID
  fileUploadUrl: URL
  uploadedAt: Instant
  claimId: ID
  category: String
  contentType: String
}

type PaymentDefault {
  year: Int
  week: Int
  paymentDefaultType: String
  paymentDefaultTypeText: String
  amount: MonetaryAmount
  caseId: String
  claimant: String
}

type Debt {
  paymentDefaults: [PaymentDefault]
  debtDate: LocalDate
  totalAmountPublicDebt: MonetaryAmount
  numberPublicDebts: Int
  totalAmountPrivateDebt: MonetaryAmount
  numberPrivateDebts: Int
  totalAmountDebt: MonetaryAmount
  checkedAt: Instant
  fromDateTime: LocalDateTime
}

type Person {
  personFlags: [Flag]
  debt: Debt
  whitelisted: Whitelisted
  status: PersonStatus
}

type PersonStatus {
  flag: Flag
  whitelisted: Boolean
}

type Whitelisted {
  whitelistedAt: Instant
  whitelistedBy: String
}

enum Flag {
  GREEN
  AMBER
  RED
}

input ClaimInformationInput {
  location: String
  date: LocalDate
  item: String
  policeReport: String
  receipt: String
  ticket: String
}

type MonthlySubscription {
  amount: MonetaryAmount
  member: Member
}

type Member {
  memberId: ID!
  signedOn: Instant
  firstName: String
  lastName: String
  personalNumber: String
  gender: Gender
  address: String
  postalNumber: String
  city: String
  transactions: [Transaction]
  directDebitStatus: DirectDebitStatus
  monthlySubscription(month: YearMonth!): MonthlySubscription
  fraudulentStatus: String
  fraudulentStatusDescription: String
  sanctionStatus: SanctionStatus
  account: Account
  fileUploads: [FileUpload!]!
  person: Person
  numberFailedCharges: NumberFailedCharges
  quotes: [Quote!]!
  contracts: [Contract!]!
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

interface IQuoteData {
  id: ID!
  ssn: String
  firstName: String
  lastName: String
  street: String
  city: String
  zipCode: String
  householdSize: Int
  livingSpace: Int
}

type Quote {
  id: ID!
  createdAt: Instant
  price: Float
  productType: QuoteProductType
  state: QuoteState
  initiatedFrom: String
  attributedTo: String
  currentInsurer: String
  startDate: String
  validity: Int
  memberId: ID
  breachedUnderwritingGuidelines: [String!]
  isComplete: Boolean
  data: QuoteData
  signedProductId: ID
  originatingProductId: ID
}

enum QuoteProductType {
  APARTMENT
  HOUSE
  OBJECT
}
enum QuoteState {
  INCOMPLETE
  QUOTED
  SIGNED
  EXPIRED
}

union QuoteData = ApartmentQuoteData | HouseQuoteData

type ApartmentQuoteData implements IQuoteData {
  id: ID!
  ssn: String
  firstName: String
  lastName: String
  street: String
  city: String
  zipCode: String
  householdSize: Int
  livingSpace: Int

  subType: ApartmentSubType
}

enum ApartmentSubType {
  BRF
  RENT
  SUBLET_RENTAL
  SUBLET_BRF
  STUDENT_BRF
  STUDENT_RENT
}

type HouseQuoteData implements IQuoteData {
  id: ID!
  ssn: String
  firstName: String
  lastName: String
  street: String
  city: String
  zipCode: String
  householdSize: Int
  livingSpace: Int

  ancillaryArea: Int
  yearOfConstruction: Int
  numberOfBathrooms: Int
  extraBuildings: [ExtraBuilding!]!
  isSubleted: Boolean
}

type ExtraBuilding {
  id: ID
  type: ExtraBuildingType!
  area: Int!
  hasWaterConnected: Boolean!
  displayName: String
}

enum ExtraBuildingType {
  GARAGE
  CARPORT
  SHED
  STOREHOUSE
  FRIGGEBOD
  ATTEFALL
  OUTHOUSE
  GUESTHOUSE
  GAZEBO
  GREENHOUSE
  SAUNA
  BARN
  BOATHOUSE
  OTHER
}

input QuoteInput {
  productType: QuoteProductType
  currentInsurer: String
  apartmentData: ApartmentQuoteInput
  houseData: HouseQuoteInput
  originatingProductId: ID
}

input ApartmentQuoteInput {
  street: String
  city: String
  zipCode: String
  householdSize: Int
  livingSpace: Int

  subType: ApartmentSubType
}

input HouseQuoteInput {
  street: String
  city: String
  zipCode: String
  householdSize: Int
  livingSpace: Int

  ancillaryArea: Int
  yearOfConstruction: Int
  numberOfBathrooms: Int
  extraBuildings: [ExtraBuildingInput!]
  isSubleted: Boolean
}

input QuoteFromProductInput {
  incompleteHouseQuoteData: HouseQuoteDataInput
  incompleteApartmentQuoteData: ApartmentQuoteDataInput
  originatingProductId: ID
  currentInsurer: String
}

input ApartmentQuoteDataInput {
  ssn: String
  firstName: String
  lastName: String
  street: String
  city: String
  zipCode: String
  householdSize: Int
  livingSpace: Int

  subType: ApartmentSubType
}

input HouseQuoteDataInput {
  ssn: String
  firstName: String
  lastName: String
  street: String
  city: String
  zipCode: String
  householdSize: Int
  livingSpace: Int

  ancillaryArea: Int
  yearOfConstruction: Int
  numberOfBathrooms: Int
  extraBuildings: [ExtraBuildingInput!]!
  isSubleted: Boolean
}

input ExtraBuildingInput {
  type: String!
  area: Int!
  hasWaterConnected: Boolean!
  displayName: String
}

type Transaction {
  id: ID
  amount: MonetaryAmount
  timestamp: Instant
  type: String
  status: String
}

type DirectDebitStatus {
  activated: Boolean
}

enum SanctionStatus {
  Undetermined
  NoHit
  PartialHit
  FullHit
}

type NumberFailedCharges {
  numberFailedCharges: Int!
  lastFailedChargeAt: Instant
}

type Account {
  id: ID!
  currentBalance: MonetaryAmount!
  totalBalance: MonetaryAmount!
  chargeEstimation: AccountChargeEstimation!
  entries: [AccountEntry!]!
}

type AccountChargeEstimation {
  subscription: MonetaryAmount!
  discount: MonetaryAmount!
  charge: MonetaryAmount!
  discountCodes: [String!]!
}

type SchedulerState {
  id: ID!
  member: Member
  status: ChargeStatus!
  changedBy: String!
  changedAt: Instant!
  amount: MonetaryAmount
  transactionId: ID
}

input MemberChargeApproval {
  memberId: ID!
  amount: MonetaryAmount!
}

input AccountEntryInput {
  type: AccountEntryType!
  amount: MonetaryAmount!
  fromDate: LocalDate!
  reference: String!
  source: String!
  title: String
  comment: String
}

type AccountEntry {
  id: ID!
  type: AccountEntryType!
  amount: MonetaryAmount!
  fromDate: LocalDate!
  reference: String!
  source: String!
  title: String
  comment: String
  failedAt: Instant
  chargedAt: Instant
}

enum AccountEntryType {
  CORRECTION
  SUBSCRIPTION
  CAMPAIGN
  PAYOUT
  CHARGE
  REFERRAL_DISCOUNT
  FREE_MONTH_DISCOUNT
  LOSS
}

enum ClaimSource {
  APP
  EMAIL
  INTERCOM
  PHONE
  CHAT
}

type Claim {
  id: ID
  member: Member
  recordingUrl: String
  state: ClaimState
  type: ClaimType
  reserves: MonetaryAmount
  registrationDate: Instant
  notes: [ClaimNote]
  payments: [ClaimPayment]
  events: [ClaimEvent]
  coveringEmployee: Boolean!
  claimFiles: [ClaimFileUpload!]!
}

type ClaimNote {
  text: String
  date: LocalDateTime
}

enum ClaimTypes {
  TheftClaim
  AccidentalDamageClaim
  AssaultClaim
  WaterDamageClaim
  TravelAccidentClaim
  LuggageDelayClaim
  NotCoveredClaim
  FireDamageClaim
  ApplianceClaim
  ConfirmedFraudClaim
  LiabilityClaim
  LegalProtectionClaim
  WaterDamageBathroomClaim
  WaterDamageKitchenClaim
  BurglaryClaim
  FloodingClaim
  EarthquakeClaim
  InstallationsClaim
  SnowPressureClaim
  StormDamageClaim
  VerminAndPestsClaim
  TestClaim
}
union ClaimType =
  TheftClaim
  | AccidentalDamageClaim
  | AssaultClaim
  | WaterDamageClaim
  | TravelAccidentClaim
  | LuggageDelayClaim
  | NotCoveredClaim
  | FireDamageClaim
  | ConfirmedFraudClaim
  | LiabilityClaim
  | ApplianceClaim
  | LegalProtectionClaim
  | WaterDamageBathroomClaim
  | WaterDamageKitchenClaim
  | BurglaryClaim
  | FloodingClaim
  | EarthquakeClaim
  | InstallationsClaim
  | SnowPressureClaim
  | StormDamageClaim
  | VerminAndPestsClaim
  | TestClaim

type TheftClaim {
  location: String
  date: LocalDate
  item: String
  policeReport: String
  receipt: String
}

type AccidentalDamageClaim {
  location: String
  date: LocalDate
  item: String
  policeReport: String
  receipt: String
}

type AssaultClaim {
  location: String
  date: LocalDate
  policeReport: String
}

type WaterDamageClaim {
  date: LocalDate
}

type TravelAccidentClaim {
  location: String
  date: LocalDate
  policeReport: String
  receipt: String
}

type LuggageDelayClaim {
  location: String
  date: LocalDate
  ticket: String
}

type ConfirmedFraudClaim {
  date: LocalDate
}

type LiabilityClaim {
  date: LocalDate
  location: String
}

type FireDamageClaim {
  location: String
  date: LocalDate
}

type ApplianceClaim {
  location: String
  date: LocalDate
  item: String
}

type LegalProtectionClaim {
  date: LocalDate
}

type WaterDamageBathroomClaim {
  date: LocalDate
}

type WaterDamageKitchenClaim {
  date: LocalDate
}

type BurglaryClaim {
  location: String
  date: LocalDate
  item: String
  policeReport: String
  receipt: String
}

type FloodingClaim {
  date: LocalDate
}

type EarthquakeClaim {
  date: LocalDate
}

type InstallationsClaim {
  date: LocalDate
  item: String
  location: String
}

type SnowPressureClaim {
  date: LocalDate
}

type StormDamageClaim {
  date: LocalDate
}

type VerminAndPestsClaim {
  date: LocalDate
}

type NotCoveredClaim {
  date: LocalDate
}

type TestClaim {
  date: LocalDate
}

type ClaimPayment {
  id: String
  amount: MonetaryAmount
  deductible: MonetaryAmount
  note: String
  type: ClaimPaymentType
  timestamp: Instant
  exGratia: Boolean
  transaction: Transaction
  status: ClaimPaymentStatus
}

enum ClaimPaymentStatus {
  PREPARED
  INITIATED
  SANCTION_LIST_HIT
  COMPLETED
  FAILED
}

input ClaimPaymentInput {
  amount: MonetaryAmount!
  deductible: MonetaryAmount!
  note: String!
  type: ClaimPaymentType!
  exGratia: Boolean!
  sanctionListSkipped: Boolean!
}

input ClaimNoteInput {
  text: String!
}

type ClaimEvent {
  text: String
  date: Instant
}

type SwitchableSwitcherEmail {
  id: ID!
  member: Member!
  switcherCompany: String!
  queuedAt: Instant!
  sentAt: Instant
  remindedAt: Instant
}

enum ClaimState {
  OPEN
  CLOSED
  REOPENED
}

enum ClaimPaymentType {
  Manual
  Automatic
}

enum ChargeStatus {
  INITIATED
  WAITING_FOR_SUBSCRIPTION
  SCHEDULING_SUBSCRIPTION
  SCHEDULE_SUBSCRIPTION_FAILED
  SUBSCRIPTION_SCHEDULED_AND_WAITING_FOR_APPROVAL
  APPROVED_FOR_CHARGE
  SCHEDULING_CHARGE
  CHARGE_REQUESTING
  CHARGE_REQUEST_FAILED
  CHARGE_INITIATED
  CHARGE_FAILED
  CHARGE_COMPLETED
}

input TicketInput {
  assignedTo: String
  priority: Float
  type: TicketType
  remindNotificationDate: LocalDate
  remindNotificationTime: LocalTime
  remindMessage: String
  description: String
  status: TicketStatus
  referenceId: String
  memberId: String
}

type Ticket {
  id: ID
  assignedTo: String
  createdAt: Instant
  createdBy: String
  memberId: String
  referenceId: String
  priority: Float
  type: TicketType
  remindNotificationDate: LocalDate
  remindNotificationTime: LocalTime
  remindMessage: String
  description: String
  status: TicketStatus
}

type TicketHistory {
  id: ID
  createdAt: Instant
  createdBy: String
  type: TicketType
  revisions: [TicketRevision]
}

type TicketRevision {
  assignedTo: String
  manualPriority: Float
  remindDate: LocalDate
  remindTime: LocalTime
  remindMessage: String
  status: TicketStatus
  changedAt: Instant
  changeType: TicketChangeType
  changedBy: String
  description: String
}

input RemindNotification {
  date: LocalDate
  time: LocalTime
  message: String
}

enum TicketChangeType {
  TICKET_CREATED
  CHANGED_REMINDER
  CHANGED_ASSIGNED_TO
  CHANGED_DESCRIPTION
  CHANGED_STATUS
  CHANGED_PRIORITY
}

enum TicketStatus {
  WAITING
  WORKING_ON
  ON_HOLD
  RESOLVED
}

enum TicketType {
  REMIND
  MESSAGE
  CLAIM
  CALL_ME
  OTHER
}

# A String-representation of `java.time.YearMonth`, ex: `"2018-06"`
scalar YearMonth
# An object-representation of `javax.money.MonetaryAmount`, ex: `{"amount": 100  "currency": "SEK"}`
scalar MonetaryAmount
# A String-representation of `java.time.ZonedDateTime`, ex: `"2018-09-21T14:17:46.536405+02:00[Europe/Stockholm]"`
scalar ZonedDateTime
# A String-representation of `java.time.LocalDate`, ex:  `"2018-09-26"`
scalar LocalDate
# A String-representation of `java.time.LocalTime`
scalar LocalTime
# A String-representation of `java.time.LocalDateTIme`, ex: `"2018-06-11T20:08:30.123456"`
scalar LocalDateTime
# A String-representation of `java.time.Instant`, ex: `"2018-06-11T20:08:30.123456"`
scalar Instant
# A String-representation of `java.net.URL`, ex: "https://www.google.com/"
scalar URL
